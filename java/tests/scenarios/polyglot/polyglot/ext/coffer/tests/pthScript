# pth test script
#
# This file is a test script for pth (Polyglot Test Harness). It
# conforms to the following grammar.
#
#      ScriptFile   ::= CompilerTest+
#      CompilerTest ::= ExtClassName ["CmdLineArgs"] { FileTest [; FileTest]* }
#      FileTest     ::= Filenames [Description] [FailureSet]
#      Filenames    ::= Filename [Filename]*
#      Description  ::= LitString
#      FailureSet   ::= Failure [, Failure]*
#      Failure      ::= ( ErrorKind )
#                    |  ( ErrorKind, "RegExp" )
#                    |  ( "RegExp" )
#                    |  ( )
#      ErrorKind    :   one of, or a unique prefix of one of the following 
#                       strings: "Warning", "Internal Error", "I/O Error", 
#                       "Lexical Error", "Syntax Error", "Semantic Error"
#                       or "Post-compiler Error".
#      Filename     :   the name of a file. Is interpreted from the 
#                       directory where pth is run.
#      LitString    :   a literal string, enclosed in quotes.
#      RegExp       :   a regular expression, as in java.util.regex; 
#                       is always enclosed in quotes.
#      CmdLineArgs  :   additional command line args for the Polyglot 
#                       compiler; is always enclosed in quotes.

polyglot.ext.coffer.ExtensionInfo {
    Exc.cof ;
    Exc2.cof ;
    Hello.cof ;
    InputStream.cof ;
    SimpleTest.cof ;
    SimpleTest2.cof (Semantic, "Key.*I.*not.*freed") ;
    SimpleTest3.cof (Semantic, "Key.*F.*not.*freed");
    SimpleTest4.cof (Semantic, "Can evaluate expression.*only if key.*I.*is held") ;
    SimpleTest5.cof ;
    SimpleTest6.cof (Semantic, "Can evaluate expression.*only if key.*I.*is held") ;
    SimpleTest7.cof (Semantic, "Can evaluate expression.*only if key.*I.*is held") ;
    SimpleTest8.cof ;
    Subclassing.cof ;
    TestIS.cof
}
