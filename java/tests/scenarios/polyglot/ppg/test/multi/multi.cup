import java_cup.runtime.*;

parser code {: 
    private Lexer lexer;           
    private static String filename; 
    

    
    public static String getFilename() { return filename; } 

    public Parser (String fname, Lexer lex) { 
        this(); 
        filename = fname; 
        lexer = lex;
    } 

    public void syntax_error (Symbol cur_token) { 
        Token tok = (Token) cur_token.value; 
        report_error (tok.getFilename()+": syntax error at line " + 
						tok.getLineno() + ": \"" + tok.getValue() + "\" (" + 
						tok.getID() + ")", null); 
        System.exit(1);
    } 

    public void report_fatal_error (String message, Object info) { 
        // stop parsing 
        done_parsing(); 

        // use the normal error message reporting to put out the message 
        report_error(message, info); 
        System.exit(1);
    } 

    private static Object program; 
    public static Object getProgramNode() { return program; } 
    public static void setProgramNode(Object n) { program = n; } 
:}; 

scan with {: 
    return lexer.getToken().getSymbol(); 
:}; 

nonterminal goal;
nonterminal ParenExpr paren_expr;
nonterminal Expr expr;

terminal Token PLUS, MINUS, RPAREN, LPAREN;
terminal Token NUM;

start with goal;

goal ::=
	paren_expr:pe {: Parser.setProgramNode(pe); :}
;

paren_expr ::= 
	LPAREN expr:e RPAREN {:
		RESULT = new ParenExpr(e);
	:}
;

expr ::=

	NUM:l PLUS NUM:r {:  RESULT = new Expr((Integer)l.getValue(),

											Constant.PLUS,

											(Integer)r.getValue());  :}

|	NUM:l MINUS NUM:r {:  RESULT = new Expr((Integer)l.getValue(),

											Constant.MINUS,

											(Integer)r.getValue());  :}

;

